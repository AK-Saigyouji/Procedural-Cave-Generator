/* This class is designed to expose critical marching squares information necessary for collision detection to
 * consumers of the MeshGeneration system. Whether for path-finding or simply placing content in run-time, 
 * being able to determine whether an object will collide with walls is an essential piece of functionality.
 * Although there exist general methods to do this without knowledge of the specific geometry, they are orders of
 * magnitude slower and substantially more complicated. This class offers constant-time collision queries for 
 * both points in space and arbitrary boxes of any size. These queries can be used as primitives to design more 
 * complex queries involving meshes and colliders.*/

using UnityEngine;
using UnityEngine.Assertions;

namespace CaveGeneration.MeshGeneration
{
    /// <summary>
    /// Used to efficiently test whether points land on the floor of a cave generated by a given grid. Note that
    /// unlike the mesh generator, there are no restrictions on the size of the grid for this class. 
    /// </summary>
    public sealed class FloorTester
    {
        readonly WallGrid grid;
        readonly float scaleReciprocal;
        readonly int scale;
        readonly int xMax;
        readonly int zMax;

        readonly WallCache wallCache;

        internal FloorTester(WallGrid grid)
        {
            Assert.IsNotNull(grid);
            this.grid = grid; // WallGrids are immutable so we don't need to create a copy.
            scale = grid.Scale;
            scaleReciprocal = 1f / scale;

            xMax = (grid.Length - 1) * scale;
            zMax = (grid.Width - 1) * scale;

            wallCache = new WallCache(grid);
        }

        /// <summary>
        /// Does the box with the given coordinates fit entirely within a floor region? i.e. will such a box
        /// be free of collisions in the (x,z) plane. 
        /// </summary>
        public bool CanFitBox(Vector2 botLeft, Vector2 topRight)
        {

            ValidateBox(botLeft, topRight);
            
            if (!AreCornersFloors(botLeft, topRight))
            {
                return false;
            }

            // WallCache allows us to lookup the number of walls intersecting a box in constant time,
            // but it only works with integers, not floats. This rounding will gives us correct collision
            // information for the sides of the box, but potentially not the corners which have to be handled
            // separately. 
            int bot   = Mathf.RoundToInt(botLeft.y  * scaleReciprocal);
            int left  = Mathf.RoundToInt(botLeft.x  * scaleReciprocal);
            int top   = Mathf.RoundToInt(topRight.y * scaleReciprocal);
            int right = Mathf.RoundToInt(topRight.x * scaleReciprocal);

            // There are potential false collisions where a box corner sits just outside a corner triangle,
            // e.g. for the bot-left corner with this wall configuration:
            // 0 0
            // 1 0
            // If botLeft is (0.3, 0.3), then there shouldn't be a collision but due to our rounding,
            // wallCache will count the bottom left corner because bot = 0, left = 0. We can simply 
            // subtract off the walls given by the new corners, since we already confirmed that
            // the actual corners are floors. 
            int numFalseWalls = CountCornerWalls(bot, top, left, right);
            int numWallsInBox = wallCache.CountWallsInBox(bot, top, left, right) - numFalseWalls;
            Assert.IsTrue(numWallsInBox >= 0, "Internal error: impossible number of walls counted.");
            return numWallsInBox == 0;
        }

        /// <summary>
        /// Does the cave produced by this grid contain a floor at these world coordinates?
        /// </summary>
        public bool IsFloor(float x, float z)
        {
            if (x <= 0 || z <= 0 || xMax <= x || zMax <= z) return false;
            x *= scaleReciprocal;
            z *= scaleReciprocal;
            int gridX = (int)x;
            int gridZ = (int)z;
            float fractionalX = x - gridX;
            float fractionalZ = z - gridZ;

            byte botLeft = grid[gridX, gridZ];
            byte botRight = grid[gridX + 1, gridZ];
            byte topRight = grid[gridX + 1, gridZ + 1];
            byte topLeft = grid[gridX, gridZ + 1];

            int configuration = MarchingSquares.ComputeConfiguration(botLeft, botRight, topRight, topLeft);
            return !MarchingSquares.IntersectsTriangle(new Vector2(fractionalX, fractionalZ), configuration);
        }

        /// <summary>
        /// Count the number of corners of the (possibly degenerate) box given by these coordinates. e.g.
        /// bot = 2, top = 2, left = 3, right = 5 will return 0, 1 or 2 depending on which of (3,2) and (5,2)
        /// are walls. 
        /// </summary>
        /// <returns>Integer between 0 and 4 (inclusive).</returns>
        int CountCornerWalls(int bot, int top, int left, int right)
        {
            bool distinctY = top != bot;
            bool distinctX = left != right;
            if (distinctY && distinctX)
            {
                return grid[left, top] + grid[right, top] + grid[left, bot] + grid[right, bot];
            }
            else if (distinctY)
            {
                return grid[left, top] + grid[left, bot];
            }
            else if (distinctX)
            {
                return grid[left, bot] + grid[right, bot];
            }
            else
            {
                return grid[left, bot];
            }
        }

        static void ValidateBox(Vector2 botLeft, Vector2 topRight)
        {
            if (botLeft.x > topRight.x || botLeft.y > topRight.y)
            {
                const string errorFormat = "Impossible box. Bottom Left: {0}, Top Right: {1}";
                throw new System.ArgumentException(string.Format(errorFormat, botLeft, topRight));
            }
        }

        bool AreCornersFloors(Vector2 botLeft, Vector2 topRight)
        {
            return IsFloor(botLeft.x, botLeft.y)
                && IsFloor(botLeft.x, topRight.y)
                && IsFloor(topRight.x, botLeft.y)
                && IsFloor(topRight.x, topRight.y);
        }
    } 
}
