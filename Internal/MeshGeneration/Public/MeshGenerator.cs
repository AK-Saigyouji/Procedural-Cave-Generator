/* High level class overseeing the mesh generation system. The generate methods are all written in a thread-safe way, 
 * which is why a custom MeshData class is used instead of Unity's unsafe Mesh class. The Create methods are not thread-safe,
 * as they turn the MeshData classes into Meshes. 
 * 
 * The core algorithm driving mesh generation is Marching Squares, which is implemented in the MapTriangulator class. 
 * It turns a grid of 0s (floors) and 1s (walls) into a collection of triangles representing the walls, but with more 
 * structure than simply putting a square at every 1. 
 * 
 * At the moment this class supports Enclosed and Isometric cave types. Isometric caves are designed with an isometric perspective
 * in mind (hence the name) and thus have ceilings that are built over the walls, not the floors. Enclosed caves are completely 
 * closed off caves designed with a 1st person perspective in mind.
 * 
 * For isometric cave generation, the 1s are triangulated into a ceiling, and the 0s are triangulated into a floor. 
 * Outlines are computed and quads are built to connect the ceiling and floor meshes, giving complete 3D 
 * geometry. Optional height maps then give the geometry added variation by translating the height of floors and ceilings. 
 * 
 * Enclosed cave generation is similar, but instead of triangulating a ceiling, a copy of the floor is made and inverted.
 */

using UnityEngine;
using UnityEngine.Assertions;
using UnityEngine.Profiling;

namespace CaveGeneration.MeshGeneration
{
    public enum CaveType
    {
        Isometric,
        Enclosed
    }

    /// <summary>
    /// Produces meshes and colliders for grids. Break grids larger than 200 by 200 into smaller grids before feeding
    /// into the mesh generator.
    /// </summary>
    public sealed class MeshGenerator
    {
        MeshData ceilingMesh;
        MeshData wallMesh;
        MeshData floorMesh;

        public string Index { get; private set; }

        const int MAX_SIZE = 200;

        /// <param name="index">Optional label, useful if using multiple mesh generators concurrently.</param>
        public MeshGenerator(string index = "")
        {
            Index = index ?? "";
        }

        /// <summary>
        /// Generates meshes for a cave. 
        /// </summary>
        /// <exception cref="System.ArgumentException"></exception>
        /// <exception cref="System.ArgumentNullException"></exception>
        public static CaveMeshes GenerateCaveMeshes(WallGrid grid, CaveType type, IHeightMap floorHeightMap, IHeightMap ceilingHeightMap)
        {
            var generator = new MeshGenerator();
            generator.Generate(grid, type, floorHeightMap, ceilingHeightMap);
            return generator.ExtractMeshes();
        }

        /// <summary>
        /// Generate the data necessary to produce meshes for a cave. Safe to execute outside the primary thread.
        /// Call ExtractMeshes to build and retrieve the meshes generated by this method. 
        /// </summary>
        /// <exception cref="System.ArgumentException"></exception>
        /// <exception cref="System.ArgumentNullException"></exception>
        /// <param name="grid">Grid specifying walls and floors. Must have length and width at most 200.</param>
        public void Generate(WallGrid grid, CaveType type, IHeightMap floorHeightMap, IHeightMap ceilingHeightMap)
        {
            ValidateInput(grid, floorHeightMap, ceilingHeightMap);
            switch (type)
            {
                case CaveType.Isometric:
                    GenerateIsometric(grid, floorHeightMap, ceilingHeightMap);
                    break;
                case CaveType.Enclosed:
                    GenerateEnclosed(grid, floorHeightMap, ceilingHeightMap);
                    break;
                default:
                    throw new System.ArgumentException("Unrecognized Cave Type.");
            }
        }

        /// <summary>
        /// Build and return the meshes generated by the generate method. Must be run on the primary thread.
        /// </summary>
        /// <exception cref="System.InvalidOperationException"></exception>
        public CaveMeshes ExtractMeshes()
        {
            if (floorMesh == null || wallMesh == null || ceilingMesh == null)
                throw new System.InvalidOperationException("Generate meshes before extracting.");

            Mesh floor   = floorMesh.CreateMesh();
            Mesh walls   = wallMesh.CreateMesh();
            Mesh ceiling = ceilingMesh.CreateMesh();

            return new CaveMeshes(floor, walls, ceiling, Index);
        }

        void GenerateIsometric(WallGrid grid, IHeightMap floorHeightMap, IHeightMap ceilingHeightMap)
        {
            ceilingMesh = MeshBuilder.BuildCeiling(grid, ceilingHeightMap);
            wallMesh    = MeshBuilder.BuildWalls(grid, floorHeightMap, ceilingHeightMap);
            floorMesh   = MeshBuilder.BuildFloor(grid, floorHeightMap);
        }

        void GenerateEnclosed(WallGrid grid, IHeightMap floorHeightMap, IHeightMap enclosureHeightMap)
        {
            floorMesh   = MeshBuilder.BuildFloor(grid, floorHeightMap);
            ceilingMesh = MeshBuilder.BuildEnclosure(floorMesh, enclosureHeightMap);
            wallMesh    = MeshBuilder.BuildWalls(grid, floorHeightMap, enclosureHeightMap);
        }

        void ValidateInput(WallGrid grid, IHeightMap floorHeightMap, IHeightMap ceilingHeightMap)
        {
            if (grid == null)
                throw new System.ArgumentNullException("grid");

            if (grid.Length > MAX_SIZE || grid.Width > MAX_SIZE)
                throw new System.ArgumentException(string.Format("Max grid size is {0} by {0}", MAX_SIZE));

            if (floorHeightMap == null)
                throw new System.ArgumentNullException("floorHeightMap");

            if (ceilingHeightMap == null)
                throw new System.ArgumentNullException("ceilingHeightMap");
        }
    }
}