using UnityEngine;
using System.Collections;

namespace CaveGeneration
{
    /// <summary>
    /// A generalization of perlin noise, this class allows the generation of continuously varying, random values
    /// designed with terrain in mind.
    /// </summary>
    public abstract class HeightMapBuilder : MonoBehaviour
    {
        // This represents how much the height map can deviate from the base height of the walls
        public float maxHeight;

        [Tooltip("Level of smoothness of height map - think rolling hills vs jagged mountains.")]
        public float scale;

        [Tooltip("The number of height maps to stack onto eachother, each more compressed and with smaller contribution.")]
        public int numLayers;

        [Tooltip("How quickly the contribution of subsequent layers is reduced.")]
        [Range(0.001f, 1f)]
        public float amplitudeDecay;

        [Tooltip("How much more compressed each subsequent layer becomes.")]
        public float frequencyGrowth;

        [Tooltip("If selected, will visualize a sample of the height map generated by the current parameters in the inspector.")]
        public bool visualize = false;

        HeightMapDrawer drawer;

        /// <summary>
        /// Once parameter selection is finalized, use this method to initialize the height map with a specific seed.
        /// </summary>
        public HeightMap Build(int seed, int baseHeight)
        {
            float amplitudePersistance = 1 - amplitudeDecay;
            Noise noise = new Noise(numLayers, amplitudePersistance, frequencyGrowth, scale, seed);
            return new HeightMap(noise, baseHeight, maxHeight);
        }

        void OnValidate()
        {
            if (numLayers < 1)
            {
                numLayers = 1;
            }
            if (maxHeight <= 0)
            {
                maxHeight = 0.001f;
            }
            if (scale <= 0)
            {
                scale = 0.0001f;
            }
            if (frequencyGrowth < 1)
            {
                frequencyGrowth = 1;
            }
            if (visualize)
            {
                UpdateDrawer();
            }
        }

        void UpdateDrawer()
        {
            HeightMap heightMap = Build(seed: 0, baseHeight: 0);
            if (drawer == null)
            {
                drawer = new HeightMapDrawer();
            }
            drawer.BuildMesh(heightMap);
        }

        void OnDrawGizmos()
        {
            if (visualize)
            {
                Gizmos.DrawMesh(drawer.mesh);
            }
        }
    } 
}
